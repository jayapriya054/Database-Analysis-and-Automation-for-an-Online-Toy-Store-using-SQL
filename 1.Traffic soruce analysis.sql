# E commerce and web Analysis- to extracting and analysing data to generate insights.
#Traffic Analysis- understanding where the customers are coming from and which channels (email, social,search,direct) are driving the highest quality traffic

/*USES CASES;-
1.Analysing search data and investing in the campaigns that gives stronges CVR conversion rates
2.Comparing user behaviour pattern across traffic sources to inform creative strategy
3.identifying opportunities to identify the wasted spend by company /sacel high conversion traffic.
*/

USE MAVENFUZZYFACTORY;
SELECT * FROM WEBSITE_SESSIONS WHERE WEBSITE_SESSION_ID =1059;
SELECT * FROM WEBSITE_PAGEVIEWS WHERE WEBSITE_SESSION_ID =1059;
SELECT * FROM ORDERS WHERE WEBSITE_SESSION_ID =1059;

#TASK 1.1. TRAFFIC SOURCE ANALYSIS USING WEBSITE SESSIONS, PAGEVIEWS AND ORDERS- OFTEN DONE BY MARKETING ANALYST IN ANY COMPANY

-- Tracking parameter to measure paid marketing activity- UTM (Urchin Tracking module).
-- Using the UTM parameters stored in the DB to identify the paid website sessions.
-- From the session data, we can link to our order data to understand how much revenue our paid campaigns are driving.

SELECT 
    website_sessions.utm_content,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id) / COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_coversionrate
FROM
    website_sessions
        LEFT JOIN
    orders ON orders.website_session_id = website_sessions.website_session_id
WHERE
    website_sessions.website_session_id BETWEEN 1000 AND 2000
GROUP BY website_sessions.utm_content
ORDER BY sessions DESC;

#INFERENCE
-- PERCENTAGE OF SESSION THAT CONVERTS TO THE PROFIT , 3.59% REVENUE FROM EACH SESSION IN utm_content g_ad_1.

# TASK 1.2. TOP TRAFFIC SOURCE ANALYSIS - USING WEBSITE SESSION WITH BREAKDOWN BY UTM SOURCE, CAMPAIGN, AND REFERRING DOMAIN.

SELECT 
    UTM_SOURCE,
    UTM_CAMPAIGN,
    HTTP_REFERER,
     COUNT(DISTINCT WEBSITE_SESSION_ID) AS NO_OF_SESSIONS
FROM
    WEBSITE_SESSIONS
WHERE
    CREATED_AT < '2012-04-12'
GROUP BY UTM_SOURCE , UTM_CAMPAIGN , HTTP_REFERER
ORDER BY NO_OF_SESSIONS DESC;

# BASED ON LAST OUTPUT, DIG DEEPER INTO THE GSEARCH NONBRAND CAMPAIGN TRAFFIC TO EXPLORE MORE
# CALCULATE THE CONVERSION RATE FROM SESSION TO ORDER IF IT IS ATLEAST 4%, OTHERWISE INCREASE BIDS FOR MORE VOLUME.
SELECT 
    COUNT(DISTINCT WEBSITE_SESSIONS.WEBSITE_SESSION_ID) AS SESSIONS,
	COUNT(DISTINCT ORDERS.ORDER_ID) AS ORDRES,
    COUNT(DISTINCT ORDERS.ORDER_ID)/ COUNT(DISTINCT WEBSITE_SESSIONS.WEBSITE_SESSION_ID) AS SESSION_TO_ORDER_CONVERSION_RATE
FROM
    WEBSITE_SESSIONS
        LEFT JOIN
    ORDERS ON ORDERS.WEBSITE_SESSION_ID = WEBSITE_SESSIONS.WEBSITE_SESSION_ID
WHERE
    WEBSITE_SESSIONS.CREATED_AT < '2012-04-14'
        AND UTM_SOURCE = 'gsearch'
        AND UTM_CAMPAIGN = 'nonbrand';

# INFERENCE- SESSION TO ORDER CONVERSION RATE IS LESS THAN 4% WHICH IS LESS THAN EXPECTED

# TASK 3- BID OPTIMIZATION
#ANSLYZE THE IMPACT OF BID REDUCTION, ANALYSE PERFORMANCE TRENDING BY DEVICE TYPE IN ORDER TO REFINE BIDDING STRATEGY.


/*Understanding various segments of paid traffic, to optimize the marketing budget
to figure out right amount of bid for various segments  (mobile / laptop) based on ho much revenue it makes*/

SELECT 
    YEAR(CREATED_AT),
    WEEK(CREATED_AT),
    MIN(DATE(CREATED_AT)) AS WEEK_START,
    COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSIONS
FROM
    WEBSITE_SESSIONS	
WHERE
    WEBSITE_SESSION_ID BETWEEN 100000 AND 115000
GROUP BY 1 , 2;

#To check how many times an item is purchased

SELECT 
    PRIMARY_PRODUCT_ID,
    COUNT(DISTINCT CASE
            WHEN ITEMS_PURCHASED = 1 THEN ORDER_ID
            ELSE NULL
        END) AS COUNT_SINGLE_ITEM_ORDERS,
    COUNT(DISTINCT CASE
            WHEN ITEMS_PURCHASED = 2 THEN ORDER_ID
            ELSE NULL
        END) AS COUNT_TWO_ITEM_ORDERS
FROM
    ORDERS
WHERE
    ORDER_ID BETWEEN 31000 AND 32000
GROUP BY 1;

# TASK 4- TRAFFIC SOURCE TRENDING- to pull gsearch nonbrand trended session volume, by week.
SELECT 
    YEAR(CREATED_AT) AS YR,
    WEEK(CREATED_AT) AS WK,
    MIN(DATE(CREATED_AT)) AS WEEK_STARTED_AT,
    COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSIONS
FROM
    WEBSITE_SESSIONS
WHERE
    CREATED_AT < '2012-05-10'
        AND UTM_SOURCE = 'GSEARCH'
        AND UTM_CAMPAIGN = 'NONBRAND'
GROUP BY 1 , 2;

#TASK 5- SESSION TO ORDER CONVERSION RATES FROM SESSION TO ORDER, BY DEVICE TYPE.

SELECT 
    WEBSITE_SESSIONS.DEVICE_TYPE,
    COUNT(DISTINCT (WEBSITE_SESSIONS.WEBSITE_SESSION_ID)) AS SESSIONS,
    COUNT(DISTINCT (ORDERS.ORDER_ID)) AS ORDERS,
    COUNT(DISTINCT (ORDERS.ORDER_ID)) / COUNT(DISTINCT (WEBSITE_SESSIONS.WEBSITE_SESSION_ID)) AS CONV_RT
FROM
    WEBSITE_SESSIONS
        LEFT JOIN
    ORDERS ON ORDERS.WEBSITE_SESSION_ID = WEBSITE_SESSIONS.WEBSITE_SESSION_ID
WHERE
    WEBSITE_SESSIONS.CREATED_AT < '2012-05-11'
        AND UTM_SOURCE = 'GSEARCH'
        AND UTM_CAMPAIGN = 'NONBRAND'
GROUP BY 1;

# TASK 6- WEEKLY TRENDS FOR BOTH DESKTOP AND MOBILE 
	use mavenfuzzyfactory;
SELECT 
	-- YEAR(CREATED_AT) AS YR,
    -- WEEK(CREATED_AT) AS WK,
    MIN(DATE(CREATED_AT)) AS WEEK_START_DATE,
    COUNT(DISTINCT CASE
            WHEN DEVICE_TYPE = 'DESKTOP' THEN WEBSITE_SESSION_ID
            ELSE NULL
        END) AS DESKTOP_SESSIONS,
    COUNT(DISTINCT CASE
           WHEN DEVICE_TYPE = 'MOBILE' THEN WEBSITE_SESSION_ID
            ELSE NULL
        END) AS MOBILE_SESSIONS
    -- COUNT(DISTINCT WEBSITE_SESSION_ID) AS TOTAL_SESSIONS
FROM
    WEBSITE_SESSIONS
WHERE
    WEBSITE_SESSIONS.CREATED_AT< '2012-06-09'
        AND WEBSITE_SESSIONS.CREATED_AT> '2012-04-15'
        AND UTM_SOURCE = 'GSEARCH'
        AND UTM_CAMPAIGN = 'NONBRAND'
GROUP BY YEAR(CREATED_AT), WEEK(CREATED_AT); 
		